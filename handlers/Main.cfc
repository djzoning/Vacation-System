component extends="coldbox.system.EventHandler"{	property name="mailer" inject="services.Mailer";	property name="logErrorModel" inject="LogError";	property name="VacationModel" inject="Vacation";	property name="Formatter" inject="services.Formatter";	property name="VacationStatusModel" inject="VacationStatus";	property name="TeamModel" inject="Team";	property name="RoleModel" inject="Role";	property name="UserModel" inject="User";	any function preHandler(event, rc, prc, action, eventArguments){		if(structKeyExists(SESSION, 'user')) {			prc.userNotifications = VacationModel.getPendingRequests();		}	}	// Default Action	function index(event,rc,prc){		setNextEvent('dashboard.index');	}	/************************************** IMPLICIT ACTIONS *********************************************/	function onAppInit(event,rc,prc){		VacationStatusModel.addInitStatus();	}	function onRequestStart(event,rc,prc){			}	function onRequestEnd(event,rc,prc){			}	function onSessionStart(event,rc,prc){	}	function onSessionEnd(event,rc,prc){		var sessionScope = event.getValue("sessionReference");		var applicationScope = event.getValue("applicationReference");	}	function onException(event,rc,prc){		//Grab Exception From private request collection, placed by ColdBox Exception Handling		var exception = prc.exception;		if(exception.getType() EQ "HandlerService.EventHandlerNotRegisteredException") {			controller.setSetting( "CustomErrorTemplate",  "/views/_templates/404.cfm");			event.setHTTPHeader(statusCode=404);		}		else {			var memento = structNew();    		memento.action = event.getCurrentAction();	    	memento.handler = event.getCurrentHandler();	    	memento.htmlBaseUrl = event.getHtmlBaseUrl();	    	memento.sesBaseUrl = event.getSesBaseUrl(); 	    	memento.httpMethod = event.gethttpMethod();	    	memento.rc = serializeJson(event.getcollection());	    	memento.timeStamp = now();	    	memento.exception = serializeJson(exception);	    	if(structKeyExists(SESSION,"user")) {	    		memento.User = SESSION.User.Id;	    	}			logRecord = logErrorModel.new();	    	logRecord.populate(memento = memento);	    	logErrorModel.save(logRecord);			Mailer.sendErrorMail(exception.getExceptionStruct());			event.setHTTPHeader(statusCode=500);			controller.setSetting( "CustomErrorTemplate",  "/views/_templates/error.cfm");		}	}	function onMissingTemplate(event,rc,prc){		//Grab missingTemplate From request collection, placed by ColdBox		var missingTemplate = event.getValue("missingTemplate");	}	function inboxDropdown( event, rc, prc ){		return renderView("viewlets/inboxDropdown", prc);	}		function notificationDropdown( event, rc, prc ){		prc.notifications = [];		return renderView("viewlets/notificationDropdown", prc);	}	function userLoginDropdown( event, rc, prc ){		return renderView("viewlets/userLoginDropdown");	}	function breadcrumbs(){		return renderView("viewlets/breadcrumbs");	}}